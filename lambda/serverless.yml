service: game-cloud-save-lambda

frameworkVersion: '3'

plugins:
  - serverless-local-nodejs-manager
  - serverless-stage-manager
  - serverless-iam-roles-per-function
  - serverless-plugin-split-stacks
  - serverless-webpack

custom:
  localNodejsVersion: ${file(../config.yml):localNodejsVersion}
  stages: ${file(../config.yml):stages}
  webpack:
    webpackConfig: ../webpack.config.js
    includeModules:
      forceExclude:
        - '@aws-sdk/client-cognito-identity-provider'
        - '@aws-sdk/client-dynamodb'
        - '@aws-sdk/client-s3'
        - '@aws-sdk/lib-dynamodb'
        - '@aws-sdk/s3-request-presigner'
  authorizers:
    userAuthorizer:
      type: jwt
      id:
        Fn::ImportValue: ${file(../config.yml):projectName}-${self:provider.stage}-HttpApiAuthorizerUserAuthorizerId

provider:
  name: ${file(../config.yml):platform}
  stage: ${opt:stage, file(../config.yml):defaultStage}
  region: ${file(../config.yml):region}
  profile: ${file(../config.yml):profile}
  runtime: ${file(../config.yml):runtime}
  logRetentionInDays: ${file(../config.yml):logRetentionInDays}
  versionFunctions: ${file(../config.yml):versionFunctions}

  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    Stage: ${self:provider.stage}
    Region: ${self:provider.region}
    # DynamoDB Tables
    UserGameTable: ${file(../config.yml):projectName}-${self:provider.stage}-UserGameTable
    UserCloudSaveTable: ${file(../config.yml):projectName}-${self:provider.stage}-UserCloudSaveTable
    # S3 Bucket
    StorageBucket: ${file(../config.yml):projectName}-${self:provider.stage}-storagebucket
    # Cognito Client
    UserPoolClientId:
      Fn::ImportValue: ${file(../config.yml):projectName}-${self:provider.stage}-UserPoolClientId

  httpApi:
    id:
      Fn::ImportValue: ${file(../config.yml):projectName}-${self:provider.stage}-HttpApiId

package:
  individually: true

functions:
  authService:
    handler: functions/authService/authService.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - 'cognito-idp:SignUp'
          - 'cognito-idp:ConfirmSignUp'
          - 'cognito-idp:ForgotPassword'
          - 'cognito-idp:ConfirmForgotPassword'
          - 'cognito-idp:InitiateAuth'
        Resource:
          Fn::ImportValue: ${file(../config.yml):projectName}-${self:provider.stage}-UserPoolArn
    events:
      - httpApi:
          path: /authService/registerUser
          method: POST
      - httpApi:
          path: /authService/confirmUserRegistration
          method: POST
      - httpApi:
          path: /authService/resetPassword
          method: POST
      - httpApi:
          path: /authService/confirmPasswordReset
          method: POST
      - httpApi:
          path: /authService/userAuth
          method: POST
  userService:
    handler: functions/userService/userService.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - 'cognito-idp:ChangePassword'
        Resource:
          Fn::ImportValue: ${file(../config.yml):projectName}-${self:provider.stage}-UserPoolArn
    events:
      - httpApi:
          path: /userService/changePassword
          method: POST
          authorizer: ${self:custom.authorizers.userAuthorizer}
  gameService:
    handler: functions/gameService/gameService.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - 'dynamodb:GetItem'
          - 'dynamodb:PutItem'
          - 'dynamodb:Query'
        Resource:
          Fn::ImportValue: ${file(../config.yml):projectName}-${self:provider.stage}-UserGameTableArn
    events:
      - httpApi:
          path: /gameService/getAllGames
          method: POST
          authorizer: ${self:custom.authorizers.userAuthorizer}
      - httpApi:
          path: /gameService/addGame
          method: POST
          authorizer: ${self:custom.authorizers.userAuthorizer}
      - httpApi:
          path: /gameService/updateGame
          method: POST
          authorizer: ${self:custom.authorizers.userAuthorizer}
  cloudSaveService:
    handler: functions/cloudSaveService/cloudSaveService.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - 'dynamodb:GetItem'
          - 'dynamodb:PutItem'
          - 'dynamodb:Query'
        Resource:
          Fn::ImportValue: ${file(../config.yml):projectName}-${self:provider.stage}-UserCloudSaveTableArn
      - Effect: Allow
        Action:
          - 's3:GetObject'
          - 's3:PutObject'
          - 's3:ListBucket'
        Resource:
          Fn::Join:
            - ''
            - - Fn::ImportValue: ${file(../config.yml):projectName}-${self:provider.stage}-StorageBucketArn
              - '/cloudSaves/*'
    events:
      - httpApi:
          path: /cloudSaveService/getAllCloudSaves
          method: POST
          authorizer: ${self:custom.authorizers.userAuthorizer}
      - httpApi:
          path: /cloudSaveService/requestUploadCloudSave
          method: POST
          authorizer: ${self:custom.authorizers.userAuthorizer}
      - httpApi:
          path: /cloudSaveService/completeUploadCloudSave
          method: POST
          authorizer: ${self:custom.authorizers.userAuthorizer}
      - httpApi:
          path: /cloudSaveService/requestDownloadCloudSave
          method: POST
          authorizer: ${self:custom.authorizers.userAuthorizer}